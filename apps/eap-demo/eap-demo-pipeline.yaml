apiVersion: v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "eapdemo", "namespace": "", "kind": "DeploymentConfig"}]'
  labels:
    name: eapdemo-pipeline
  name: eapdemo-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node('maven') {
            def mvnCmd = "mvn -s configuration/settings.xml"
            stage ('Build') { 
              git branch: 'master', url: 'https://github.com/igl100/openshift-eap-demo.git'
              sh "${mvnCmd} clean install -DskipTests=true"
            }
            stage ('Test and Analysis') {
              parallel (
                'Test': {
                   sh "${mvnCmd} test"
                   step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                 },
                 'Static Analysis': {
                    sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                 }
              )
            }
            stage ('Push to Nexus') {
              sh "${mvnCmd} deploy -DskipTests=true"
            }
            stage ('deploy In Development'){
              sh "rm -rf oc-build && mkdir -p oc-build/deployments"
              sh "cp target/eap-demo.war oc-build/deployments/ROOT.war"
              // clean up. keep the image stream
              sh "oc delete bc,dc,svc,route -l app=eapdemo -n dev"
              // create build. override the exit code since it complains about exising imagestream
              sh "oc new-build --name=eapdemo --image-stream=jboss-eap70-openshift --binary=true --labels=app=eapdemo -n dev || true"
              // build image
              sh "oc start-build eapdemo --from-dir=oc-build --wait=true -n dev"
              // deploy image
              sh "oc new-app eapdemo:latest -n dev"
              sh "oc expose svc/eapdemo -n dev"  
            }
            stage ('deployInTesting'){
              def v = version()
               // tag for stage
               sh "oc tag dev/eapdemo:latest stage/eapdemo:${v}"
               // clean up. keep the imagestream
               sh "oc delete bc,dc,svc,route -l app=eapdemo -n stage"
               // deploy stage image
               sh "oc new-app eapdemo:${v} -n stage"
               sh "oc expose svc/eapdemo -n stage"
            }
        }  
        def version() {
          def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
          matcher ? matcher[0][1] : null
        }  
    type: JenkinsPipeline
  triggers:
  - github:
      secret: secret01
    type: GitHub
  - generic:
      secret: secret01
    type: Generic


